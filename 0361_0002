import pandas as pd
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
from math import exp
df = pd.read_csv("L:/bucket/2019_0361_unprocessed/2019_0361_0002_MAX_TEST.txt", sep='\t')
df = df.drop([df.index[0]])
def func(x,y):
    return (x/y)*60
x= 3501
y= 1368.315
#2.558 bps = 153.5 bpm
print(x/y)
x1= 2.5586
y1= 60
print(x1*y1)

import pandas as pd
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
from math import exp
import numpy as np
#from utils import hampel (gives error)

def proc_hr(*, file: str, **kwargs) -> None:
    df = pd.read_csv("L:/bucket/2019_0361_unprocessed/2019_0361_0002_MAX_TEST.txt", header=None, names=["time"])

    # calc rri
    df.rename(columns={'Sel Duration': 'rri'}, inplace=True)
    df['rri'] = df['time'].diff()

    # calc hr

    df['hr'] = np.divide(60, df['rri_filtered'])

    # normalize the time

    df['time'] = df['time'] - df['time'].loc[0]

    # average the hr for each 1s segment, add to temp array

    time_min = 0

    time_max = np.ceil(df['time'].iloc[-1]).astype(int)

    binned_array = np.zeros([time_max, 1])

    for t in range(0, time_max):

        binned_array[t] = df['hr'].loc[(df['time'] > t) & (df['time'] <= t+1)].mean()

    round and cast as int

    binned_array = np.around(binned_array, 0).astype(int)

    # create new df

    df_hr1s = pd.DataFrame(binned_array, columns=['hr'])

    # add time (s)

    df_hr1s.insert(loc=0, column='time_(s)', value=np.linspace(1, time_max, time_max).astype(int))
proc_hr(file="")
